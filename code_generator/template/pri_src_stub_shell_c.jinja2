{% import './macro2.jinja2' as macro %}

#include "std_common.h"
#include "{{module}}.h"
#include "tiny-json.h"
#include "json-maker.h"

{% for method in methods -%}

STD_CALL std_char_t *shell_stub_{{instance}}_{{method.name}}(IN std_void_t *p_handle, IN std_char_t *params)
{
    json_t const* json;
    std_char_t response_string[128];
    std_char_t *response;
    std_char_t* dest;
    {{ module }}_t *{{ module }} = ({{ module }}_t *) p_handle;
    /****server_stub_args_def****/

    {{ macro.declare_var_with_value(type=method.ret.type, name="ret", ptr_struct=method.ret.ptr_struct, dem=";", default_value=True)}}

    {% for arg in method.args -%}
        {{ '    ' }}{{ macro.declare_var_with_value(type=arg.type, name=arg.name, ptr_struct=arg.ptr_struct, dem=";", default_value=True)}}
    {% endfor %}

    /*****server_stub_args_body*****/
    json_t mem[32];
    json = json_create( params, mem, sizeof mem / sizeof *mem );
    STD_ASSERT_RV(json != NULL, NULL);

    {% for arg in method.args -%}
        {% if loop.first %}
            json_t const* param_obj = NULL;
        {% endif %}
        {{ macro.json_object_get(tab=1, type=arg.type, name=arg.name, object="param_obj", ptr_struct=arg.ptr_struct, structs=structs) }}
    {% endfor %}

    /******server_stub_call*****/
    {{ macro.func_call("ret", method, method.ret.type, module) }}

    dest = json_objOpen( response_string, NULL );
    dest = json_objOpen( dest, "response" );
    dest = json_objOpen( dest, "return" );

    /******server_stub_ret******/
    {{ macro.json_object_add(tab=1,return_object="return_object", type=method.ret.type, key="ret", ptr_struct=method.ret.ptr_struct, structs=structs) }}

    dest = json_objClose( dest );
    dest = json_objClose( dest );
    dest = json_objClose( dest );
    json_end( dest );

    response = strdup(response_string);

    return response;
}

{#STD_CALL std_char_t *shell_stub_rpc_{{instance}}_{{method.name}}(IN std_void_t *p_handle, IN std_char_t *params)#}
{#{#}
{#    json_t const* json;#}
{#    json_t const *param_obj;#}
{#    std_char_t response_string[128];#}
{#    std_char_t *response;#}
{#    std_char_t* dest;#}
{#    {{ module }}_t *{{ module }} = ({{ module }}_t *) p_handle;#}
{#    std_char_t *remote_ip = NULL;#}
{#    std_int_t remote_port = 0;#}
{##}
{#    /****server_stub_args_def****/#}
{##}
{#    {{ macro.declare_var_with_value(type=method.ret.type, name="ret", ptr_struct=method.ret.ptr_struct, dem=";", default_value=True)}}#}
{##}
{#    {% for arg in method.args -%}#}
{#        {{ '    ' }}{{ macro.declare_var_with_value(type=arg.type, name=arg.name, ptr_struct=arg.ptr_struct, dem=";", default_value=True)}}#}
{#    {% endfor %}#}
{##}
{#    /*****server_stub_args_body*****/#}
{#    json_t mem[32];#}
{#    json = json_create( params, mem, sizeof mem / sizeof *mem );#}
{#    STD_ASSERT_RV(json != NULL, NULL);#}
{##}
{#    {% for arg in method.args -%}#}
{#        {{ macro.json_object_get(tab=1, type=arg.type, name=arg.name, object="param_obj", ptr_struct=arg.ptr_struct, structs=structs) }}#}
{#    {% endfor %}#}
{##}
{#    {{ macro.json_object_get(tab=1, type="TYPE_PTR_CHAR", name="remote_ip", object="param_obj") }}#}
{#    {{ macro.json_object_get(tab=1, type="TYPE_INT", name="remote_port", object="param_obj") }}#}
{##}
{#    /******server_stub_call*****/#}
{#    {{ macro.rpc_func_call("ret", method, method.ret.type, module) }}#}
{##}
{#    dest = json_objOpen( response_string, NULL );#}
{#    dest = json_objOpen( dest, "response" );#}
{#    dest = json_objOpen( dest, "return" );#}
{##}
{#    /******server_stub_ret******/#}
{#    {{ macro.json_object_add(tab=1,return_object="return_object", type=method.ret.type, key="ret", ptr_struct=method.ret.ptr_struct, structs=structs) }}#}
{##}
{#    dest = json_objClose( dest );#}
{#    dest = json_objClose( dest );#}
{#    dest = json_objClose( dest );#}
{#    json_end( dest );#}
{##}
{#    response = strdup(response_string);#}
{##}
{#    return response;#}
{#}#}

{% endfor %}


